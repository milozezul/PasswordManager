@using PManagerFrontend.Components.Utility
@using PManagerFrontend.Interfaces.Services
@using PManagerFrontend.Models
@using SharedModels.InputModels
@inject IDataService _data

<ModalWindow Modal="@Modal" />
<div class="flex flex-row items-center gap-x-5 px-5 py-2">
    <div class="w-1"></div>
    <img src="icons/group.svg" class="w-6 h-6" />
    <div class="flex flex-col relative">
        <InputText type="text" class="bg-gray-300 text-gray-700 rounded-sm pl-2" Value="@GroupName" ValueChanged="OnChange" ValueExpression="() => GroupName" @onkeydown="OnEnter" @oninput="OnInput" />
        @if(GroupName.Length == 0)
        {
            <div class="absolute text-red-300 text-[10px] bottom-[-13px]">Must be at least 1 character</div>
        }
        @if (GroupName.Length > 200)
        {
            <div class="absolute text-red-300 text-[10px] bottom-[-13px]">Must be less than 200 characters</div>
        }
        <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
            <img src="icons/cancel.svg" class="w-4 h-4" @onclick="ClearGroupName" />
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public EventCallback CloseNewGroupTool { get; set; }

    [Parameter, EditorRequired]
    public EventCallback RefreshData { get; set; }

    string GroupName { get; set; } = "";

    ModalWindowState Modal = new ModalWindowState();

    void OnInput(ChangeEventArgs e)
    {
        OnChange(e.Value?.ToString() ?? string.Empty);
    }

    void OnChange(string value)
    {
        GroupName = value;
    }

    async Task OnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CreateNewGroup();
        }
    }

    async Task CreateNewGroup()
    {
        var result = await _data.CreateNewCategory(new CategoryInput()
        {
            Category = GroupName
        });
        
        if (result == null)
        {
            ModalWindowState.OpenModal(Modal, "Error", "Failed to create Folder. Verify if name is unique.");
            return;
        }

        GroupName = "";
        await CloseNewGroupTool.InvokeAsync();
        await RefreshData.InvokeAsync();
    }

    void ClearGroupName()
    {
        GroupName = string.Empty;
    }
}
