@using PManagerFrontend.Interfaces.Services
@using PManagerFrontend.Models.Components
@using SharedModels.DataService
@inject IJSRuntime _js
@inject IDataService _data
@inject IDirectLinkService _direct
@inject IConfiguration _config

<div class="mt-6">
    <div class="flex flex-col">
        <div class="text-white text-sm mb-1">Saved Password</div>
        <div class="flex flex-row items-center gap-x-2">
            <InputText type="@InputType" @bind-Value="Password.Value" class="bg-gray-300 text-gray-700 rounded-sm pl-2 h-8 w-50" />            
            <img src="icons/copy.svg" class="w-4 h-4 cursor-pointer" @onclick="CopyPasswordValue" />
            <img src="icons/eye.svg" class="w-4 h-4 cursor-pointer" @onclick="SeePassword" />
        </div>
    </div>
    <div class="mt-6">
        <div class="text-white text-sm mb-1">Status</div>
        <InputRadioGroup @bind-Value="IsActive" @bind-Value:after="OnSelectRadio" >
            <label class="flex flex-row items-center gap-x-3">
                <InputRadio Value="true" id="active" /> <div class="select-none text-xs text-white">ONLINE</div>
            </label>
            <label class="flex flex-row items-center gap-x-3 mt-1">
                <InputRadio Value="false" id="inactive" /> <div class="select-none text-xs text-white">OFFLINE</div>
            </label>
        </InputRadioGroup>
    </div>
    <div class="mt-6 flex flex-row items-center gap-x-2">
        <button class="bg-sky-400 text-white text-xs font-semibold border-gray-400 border-1 rounded-md flex flex-row items-center h-8 px-3 gap-x-1 cursor-pointer hover:bg-blue-500 select-none" @onclick="OpenSharePanel">
            <img src="icons/share.svg" class="w-4 h-4" />
            <div>SHARE</div>
        </button>
        <button class="bg-sky-400 text-white text-xs font-semibold border-gray-400 border-1 rounded-md flex flex-row items-center h-8 px-3 gap-x-1 cursor-pointer hover:bg-blue-500 select-none">
            <img src="icons/key.svg" class="w-4 h-4" />
            <div>RE-ENCRYPT</div>
        </button>
    </div>
    @if (IsShare)
    {
        <div class="mt-6">
            <div class="text-white text-sm mb-1">Development/Fallback Value</div>
            <div class="flex flex-row items-center gap-x-2">
                <div class="relative">
                    <InputText type="password" class="bg-gray-300 text-gray-700 rounded-sm pl-2 h-8 w-50" @bind-Value="FallbackValue" />
                    <div class="absolute text-red-300 text-[10px] bottom-[-15px]">Must be within 100 characters</div>
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/cancel.svg" class="w-4 h-4" @onclick="ClearFallbackValue" />
                    </div>
                </div>
                <button class="bg-sky-400 text-white text-xs font-semibold border-gray-400 border-1 rounded-md flex flex-row items-center h-8 px-3 gap-x-1 cursor-pointer hover:bg-blue-500 select-none" @onclick="CreateToken">
                    <img src="icons/add.svg" class="w-4 h-4" />
                    <div>CREATE SHARING TOKEN</div>
                </button>
            </div>
        </div>
        <div class="mt-6">
            <div class="text-white text-sm mb-1">Request</div>
            <div class="w-200 bg-zinc-900 rounded-lg text-gray-100 text-sm font-[Source_Code_Pro] p-1">
                <div>POST @((_config.GetSection("API").GetSection("BaseUrl").Get<string>() + "/api/DirectAccess/enter") ?? "")</div>
                <div>[Authorization] </div>
                <div class="break-all">@DirectToken</div>
                <div>Body:</div>
                <div>{"password":""}</div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public DecryptedPassword Password { get; set; }

    [Parameter, EditorRequired]
    public RecordFolderModel Record { get; set; }

    [Parameter, EditorRequired]
    public string LockPassword { get; set; }

    [Parameter, EditorRequired]
    public EventCallback RefreshPassswords { get; set; }

    string FallbackValue { get; set; } = string.Empty;
    string InputType { get; set; } = "password";
    bool IsActive { get; set; }

    void ClearFallbackValue()
    {
        FallbackValue = string.Empty;
    }

    protected override void OnInitialized()
    {
        IsActive = Password.IsActive;
    }

    async Task CopyPasswordValue()
    {
        await _js.InvokeVoidAsync("copyToClipboard", Password.Value);
    }

    void SeePassword()
    {
        InputType = "text";
    }

    async Task OnSelectRadio()
    {
        if (IsActive)
        {
            await _data.ActivatePassword(Record.Record.Id, Password.Id, LockPassword);
            await RefreshPassswords.InvokeAsync();
        }
        else
        {
            await _data.DiactivatePassword(Record.Record.Id, Password.Id, LockPassword);
            await RefreshPassswords.InvokeAsync();
        }
    }

    bool IsShare { get; set; }

    string DirectToken { get; set; } = string.Empty;

    void OpenSharePanel()
    {
        IsShare = true;
    }

    async Task CreateToken()
    {
        var result = await _direct.GetDirectToken(new SharedModels.InputModels.LinkInput()
        {
            Fallback = FallbackValue,
            PasswordId = Password.Id,
            RecordId = Record.Record.Id,
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            DirectToken = result.Value;
        }
        else
        {
            DirectToken = result.Message;
        }
    }
}
