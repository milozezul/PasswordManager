@using PManagerFrontend.Interfaces.Services
@using PManagerFrontend.Models.Components
@using SharedModels.DataService

@inject IJSRuntime _js
@inject IDataService _data

<div class="px-15 py-5">
    <div class="flex flex-row gap-x-5">
        <div class="bg-white rounded-md px-10 py-5 shadow-md basis-3/10">
            <div class="font-semibold font-[Outfit] mb-4">Saved Password</div>
            <div class="flex flex-row items-center gap-x-2">
                <div class="relative">
                    <input type="@InputType" class="bg-gray-200 text-gray-700 rounded-sm pl-2 h-8 w-full" value="@Folder.Value" />
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/eye.svg?v=1" class="w-5 h-5 cursor-pointer" @onclick="UnmaskPassword" />
                    </div>
                </div>
                
                <img src="icons/copy.svg" class="w-4 h-4 cursor-pointer" @onclick="CopyPassword" />
            </div>
        </div>

        <div class="bg-white rounded-md px-10 py-5 shadow-md basis-3/10">
            <div class="font-semibold font-[Outfit] mb-4">Status</div>
            
            <InputRadioGroup @bind-Value="IsActive" @bind-Value:after="OnSelectStatus">
                <label class="flex flex-row items-center gap-x-3">
                    <InputRadio Value="true" id="active" /> <div class="select-none text-sm font-[Outfit]">Active</div>
                </label>
                <label class="flex flex-row items-center gap-x-3 mt-2">
                    <InputRadio Value="false" id="inactive" /> <div class="select-none text-sm font-[Outfit]">Inactive</div>
                </label>
            </InputRadioGroup>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public DecryptedPassword Folder { get; set; }

    [Parameter, EditorRequired]
    public RecordFolderModel Record { get; set; }

    [Parameter, EditorRequired]
    public EventCallback RefreshState { get; set; }

    string InputType { get; set; } = "password";
    bool IsActive { get; set; }

    protected override void OnInitialized()
    {
        IsActive = Folder.IsActive;
    }

    void UnmaskPassword()
    {
        InputType = "text";
    }

    async Task CopyPassword()
    {
        await _js.InvokeVoidAsync("copyToClipboard", Folder.Value);
    }

    async Task OnSelectStatus()
    {
        if (IsActive)
        {
            var result = await _data.ActivatePassword(Record.Record.Id, Folder.Id, Record.Key);

            var passwords = await _data.GetPasswordsByRecordId(Record.Record.Id, Record.Key);

            Record.Passwords = passwords.Passwords;
            Record.IsExpand = true;
            await RefreshState.InvokeAsync();
        }
        else
        {
            var result = await _data.DiactivatePassword(Record.Record.Id, Folder.Id, Record.Key);

            var passwords = await _data.GetPasswordsByRecordId(Record.Record.Id, Record.Key);

            Record.Passwords = passwords.Passwords;
            Record.IsExpand = true;
            await RefreshState.InvokeAsync();
        }
    }
}
