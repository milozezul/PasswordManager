@using PManagerFrontend.Interfaces.Services
@using PManagerFrontend.Models.Components
@using SharedModels.DataService

@inject IJSRuntime _js
@inject IDataService _data
@inject IConfiguration _config
@inject IDirectLinkService _direct

<div class="px-5">
    <div class="px-5 py-5 bg-white shadow-md min-w-[380px] w-3/10 mt-5">

        <div class="px-5">
            <div class="font-semibold font-[Outfit] mb-4">Saved Password</div>
            <div class="flex flex-row items-center gap-x-2">
                <div class="relative">
                    <input type="@InputType" class="bg-gray-200 text-gray-700 rounded-sm pl-2 h-8 w-full" value="@Folder.Value" />
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/eye.svg?v=1" class="w-5 h-5 cursor-pointer" @onclick="UnmaskPassword" />
                    </div>
                </div>

                <img src="icons/copy.svg" class="w-4 h-4 cursor-pointer" @onclick="CopyPassword" />
            </div>
        </div>

        <div class="px-5 py-5">
            <div class="font-semibold font-[Outfit] mb-4">Status</div>

            <InputRadioGroup @bind-Value="IsActive" @bind-Value:after="OnSelectStatus">
                <label class="flex flex-row items-center gap-x-3">
                    <InputRadio Value="true" id="active" /> <div class="select-none text-sm font-[Outfit]">Active</div>
                </label>
                <label class="flex flex-row items-center gap-x-3 mt-2">
                    <InputRadio Value="false" id="inactive" /> <div class="select-none text-sm font-[Outfit]">Inactive</div>
                </label>
            </InputRadioGroup>
        </div>

        <div class="border-b-1 border-b-gray-400"></div>

        <div class="px-5 py-5 flex flex-col">
            <div class="font-semibold font-[Outfit] mb-4">Share</div>

            <div class="font-semibold font-[Outfit] text-sm mb-1">Development/Fallback Value</div>
            <div class="relative">
                <input type="password" class="bg-gray-200 text-gray-700 rounded-sm pl-2 h-8 w-full" @bind-value:event="oninput" @bind-value="Fallback" />
                @if (Fallback.Length == 0 && IsGenerate)
                {
                    <div class="absolute text-red-500 text-[10px] bottom-[-15px]">Fallback must be at least 1 character long</div>
                }
                @if (Fallback.Length > 0)
                {
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/cancel.svg" class="w-4 h-4" @onclick="ClearFallback" />
                    </div>
                }
            </div>

            <button class="flex flex-row bg-white items-center w-full mt-8 text-sm font-bold font-[Outfit] justify-center gap-x-3 shadow-[3px_3px_5px_2px_rgba(0.0,0.0,0.0,0.5)] rounded-md py-2 hover:bg-green-100 cursor-pointer" @onclick="GenerateLink">
                <img src="icons/share.svg" class="w-4 h-4" />
                <div>GENERATE TOKEN</div>
            </button>
        </div>

        <div class="px-5">
            <div class="w-full bg-neutral-800 rounded-md text-xs font-[Source_Code_Pro] text-white p-2">
                <div class="break-all">POST @((_config.GetSection("API").GetSection("BaseUrl").Get<string>() + "/api/DirectAccess/enter") ?? "")</div>
                <div class="mt-1">[Authorization] </div>
                <div class="break-all">@DirectToken</div>
                <div class="mt-1">Body:</div>
                <div>{"password":""}</div>
            </div>
        </div>

    </div>
</div>


@code {
    [Parameter, EditorRequired]
    public DecryptedPassword Folder { get; set; }

    [Parameter, EditorRequired]
    public RecordFolderModel Record { get; set; }

    [Parameter, EditorRequired]
    public EventCallback RefreshState { get; set; }

    string InputType { get; set; } = "password";
    bool IsActive { get; set; }
    string Fallback { get; set; } = string.Empty;
    bool IsGenerate { get; set; } = false;
    string DirectToken { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        IsActive = Folder.IsActive;
    }

    void UnmaskPassword()
    {
        InputType = "text";
    }

    async Task CopyPassword()
    {
        await _js.InvokeVoidAsync("copyToClipboard", Folder.Value);
    }

    async Task OnSelectStatus()
    {
        if (IsActive)
        {
            var result = await _data.ActivatePassword(Record.Record.Id, Folder.Id, Record.Key);

            var passwords = await _data.GetPasswordsByRecordId(Record.Record.Id, Record.Key);

            Record.Passwords = passwords.Passwords;
            Record.IsExpand = true;
            await RefreshState.InvokeAsync();
        }
        else
        {
            var result = await _data.DiactivatePassword(Record.Record.Id, Folder.Id, Record.Key);

            var passwords = await _data.GetPasswordsByRecordId(Record.Record.Id, Record.Key);

            Record.Passwords = passwords.Passwords;
            Record.IsExpand = true;
            await RefreshState.InvokeAsync();
        }
    }

    void ClearFallback()
    {
        Fallback = string.Empty;
    }

    async Task GenerateLink()
    {
        IsGenerate = true;
        if (Fallback.Length == 0)
        {
            return;
        }

        var result = await _direct.GetDirectToken(new SharedModels.InputModels.LinkInput()
        {
            Fallback = Fallback,
            PasswordId = Folder.Id,
            RecordId = Record.Record.Id,
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            DirectToken = result.Value;
        }
        else
        {
            DirectToken = result.Message;
        }

    }
}
