@using PManagerFrontend.Components.Cards
@using PManagerFrontend.Components.Utility
@using PManagerFrontend.Interfaces.Services
@using PManagerFrontend.Models
@using PManagerFrontend.Models.Components
@using SharedModels.DataService
@using SharedModels.InputModels

@inject IJSRuntime _js
@inject IDataService _data
@inject IConfiguration _config
@inject IDirectLinkService _direct

<ModalWindow Modal="@Modal" />
<div class="px-5 flex flex-row gap-x-5">
    <div class="px-5 py-5 bg-white shadow-md min-w-[380px] basis-3/10 mt-5 h-full">
        <div class="text-xs flex flex-row justify-between text-gray-600">
            <div>Created: @Folder.DateCreated.ToString("dd-MM-yyyy")</div>
            <div>@(Folder.ExpirationDate != null ? "Expiration:" + Folder.ExpirationDate?.ToString("dd-MM-yyyy") : "")</div>
        </div>
        <div class="px-5 mt-2">
            <div class="font-semibold font-[Outfit] mb-4">Saved Password</div>
            <div class="flex flex-row items-center gap-x-2">
                <div class="relative w-full">
                    <input type="@InputType" class="bg-gray-200 text-gray-700 rounded-sm pl-2 h-8 w-full" value="@Folder.Value" />
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/eye.svg?v=1" class="w-5 h-5 cursor-pointer" @onclick="UnmaskPassword" />
                    </div>
                </div>

                <img src="icons/copy.svg" class="w-4 h-4 cursor-pointer" @onclick="CopyPassword" />
            </div>
        </div>

        <div class="px-5 py-5">
            <div class="font-semibold font-[Outfit] mb-4">Status</div>

            <InputRadioGroup @bind-Value="IsActive" @bind-Value:after="OnSelectStatus">
                <label class="flex flex-row items-center gap-x-3">
                    <InputRadio Value="true" id="active" /> <div class="select-none text-sm font-[Outfit]">Active</div>
                </label>
                <label class="flex flex-row items-center gap-x-3 mt-2">
                    <InputRadio Value="false" id="inactive" /> <div class="select-none text-sm font-[Outfit]">Inactive</div>
                </label>
            </InputRadioGroup>
        </div>

    </div>
    <div class="px-5 py-5 bg-white shadow-md min-w-[380px] basis-3/10 mt-5 h-full">
        <div class="px-5 flex flex-col">
            <div class="font-semibold font-[Outfit] mb-4">Share</div>

            <div class="font-semibold font-[Outfit] text-sm mb-1">Development/Fallback Value</div>
            <div class="relative">
                <input type="password" class="bg-gray-200 text-gray-700 rounded-sm pl-2 h-8 w-full" @bind-value:event="oninput" @bind-value="Fallback" />
                @if (Fallback.Length == 0 && IsGenerate)
                {
                    <div class="absolute text-red-500 text-[10px] bottom-[-15px]">Fallback must be at least 1 character long</div>
                }
                @if (Fallback.Length > 0)
                {
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/cancel.svg" class="w-4 h-4" @onclick="ClearFallback" />
                    </div>
                }
            </div>

            <button class="flex flex-row bg-white items-center w-full mt-8 text-sm font-bold font-[Outfit] justify-center gap-x-3 shadow-[3px_3px_5px_2px_rgba(0.0,0.0,0.0,0.5)] rounded-md py-2 hover:bg-green-100 cursor-pointer" @onclick="GenerateLink">
                <img src="icons/share.svg" class="w-4 h-4" />
                <div>GENERATE TOKEN</div>
            </button>
        </div>

        <div class="px-5 mt-5">
            <div class="w-full bg-neutral-800 rounded-md text-xs font-[Source_Code_Pro] text-white p-2">
                <div class="break-all">POST @((_config.GetSection("API").GetSection("BaseUrl").Get<string>() + "/api/DirectAccess/enter") ?? "") <img src="icons/copy-white.svg?v=1" class="w-4 h-4 cursor-pointer inline" @onclick="CopyBaseUrl" /></div>
                <div class="mt-1">[Authorization] </div>
                <div class="break-all">@DirectToken <img src="icons/copy-white.svg?v=1" class="w-4 h-4 cursor-pointer inline" @onclick="CopyToken" /></div>
                <div class="mt-1">Body:</div>
                <div>{"password":""} <img src="icons/copy-white.svg?v=1" class="w-4 h-4 cursor-pointer inline" @onclick="CopyBody" /></div>
            </div>
        </div>

        <div class="border-b-1 border-b-gray-400 my-5"></div>

        <div class="px-5 flex flex-col">
            <div class="font-semibold font-[Outfit] mb-4">Re-encrypt Password</div>

            <div class="font-semibold font-[Outfit] text-sm mb-1">Current Key</div>
            <div class="relative">
                <input type="password" class="bg-gray-200 text-gray-700 rounded-sm pl-2 h-8 w-full" @bind-value:event="oninput" @bind-value="CurrentKey" />
                @if (CurrentKey.Length == 0 && IsReEncrypt)
                {
                    <div class="absolute text-red-500 text-[10px] bottom-[-15px]">Current Key must be at least 1 character long</div>
                }
                @if (CurrentKey.Length > 0)
                {
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/cancel.svg" class="w-4 h-4" @onclick="ClearCurrentKey" />
                    </div>
                }
            </div>

            <div class="font-semibold font-[Outfit] text-sm mb-1 mt-3">New Key</div>
            <div class="relative">
                <input type="password" class="bg-gray-200 text-gray-700 rounded-sm pl-2 h-8 w-full" @bind-value:event="oninput" @bind-value="NewKey" />
                @if (NewKey.Length == 0 && IsReEncrypt)
                {
                    <div class="absolute text-red-500 text-[10px] bottom-[-15px]">New Key must be at least 1 character long</div>
                }
                @if (NewKey.Length > 0)
                {
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/cancel.svg" class="w-4 h-4" @onclick="ClearNewKey" />
                    </div>
                }
            </div>

            <button class="flex flex-row bg-white items-center w-full mt-8 text-sm font-bold font-[Outfit] justify-center gap-x-3 shadow-[3px_3px_5px_2px_rgba(0.0,0.0,0.0,0.5)] rounded-md py-2 hover:bg-green-100 cursor-pointer" @onclick="ReEncryptPassword">
                <img src="icons/key.svg?v=1" class="w-4 h-4" />
                <div>RE-ENCRYPT</div>
            </button>
        </div>
    </div>
    <div class="min-w-[380px] basis-3/10 mt-5 flex flex-col gap-y-3">
        <div class="px-5 py-5 bg-white shadow-md w-full">
            <div class="font-semibold font-[Outfit] text-sm mb-1 mt-3">Add Note</div>
            <div class="relative">
                <input type="text" class="w-full border-b-1 border-b-gray_900 outline-none" @onkeydown="OnNoteKeyDown" @bind-value:event="oninput" @bind-value="@Note" />

                @if (Note.Length == 0 && IsNoteSent)
                {
                    <div class="absolute text-red-500 text-[10px] bottom-[-15px]">Note must be at least 1 character long</div>
                }
                @if (Note.Length > 0)
                {
                    <div class="absolute top-0 right-2 h-full flex flex-row justify-end items-center">
                        <img src="icons/cancel.svg" class="w-4 h-4" @onclick="ClearNote" />
                    </div>
                }
            </div>
        </div>
        <div class="h-full max-h-[calc(100vh-280px)] overflow-y-scroll [scrollbar-width:none] flex flex-col gap-y-3">
            @for (int i = Folder.Notes.Count - 1; i >= 0; i--)
            {
                var note = Folder.Notes[i];

                <PasswordNote 
                    Note="@note" 
                    OnDeleteHandler="DeleteNote" />
            }
        </div>
        
    </div>
</div>


@code {
    [Parameter, EditorRequired]
    public DecryptedPassword Folder { get; set; }

    [Parameter, EditorRequired]
    public RecordFolderModel Record { get; set; }

    [Parameter, EditorRequired]
    public EventCallback RefreshState { get; set; }

    ModalWindowState Modal = new ModalWindowState();

    string InputType { get; set; } = "password";
    bool IsActive { get; set; }
    string Fallback { get; set; } = string.Empty;
    bool IsGenerate { get; set; } = false;
    string DirectToken { get; set; } = string.Empty;
    string CurrentKey { get; set; } = string.Empty;
    string NewKey { get; set; } = string.Empty;
    bool IsReEncrypt { get; set; } = false;
    string Note { get; set; } = string.Empty;
    bool IsNoteSent { get; set; } = false;

    protected override void OnInitialized()
    {
        IsActive = Folder.IsActive;
    }

    void UnmaskPassword()
    {
        InputType = "text";
    }

    async Task CopyPassword()
    {
        await _js.InvokeVoidAsync("copyToClipboard", Folder.Value);
    }

    async Task CopyBaseUrl()
    {
        await _js.InvokeVoidAsync("copyToClipboard", _config.GetSection("API").GetSection("BaseUrl").Get<string>() + "/api/DirectAccess/enter");
    }

    async Task CopyToken()
    {
        await _js.InvokeVoidAsync("copyToClipboard", DirectToken);
    }

    async Task CopyBody()
    {
        await _js.InvokeVoidAsync("copyToClipboard", "{\"password\":\"\"}");
    }

    async Task OnSelectStatus()
    {
        if (IsActive)
        {
            var result = await _data.ActivatePassword(new PasswordActivateInput()
            {
                RecordId = Record.Record.Id,
                PasswordId = Folder.Id,
                Password = Record.Key
            });

            var passwords = await _data.GetPasswordsByRecordId(new RecordPasswordsInput()
            {
                RecordId = Record.Record.Id,
                Password = Record.Key
            });

            Record.Passwords = passwords.Passwords;
            Record.IsExpand = true;
            await RefreshState.InvokeAsync();
        }
        else
        {
            var result = await _data.DiactivatePassword(new PasswordDiactivateInput()
            {
                RecordId = Record.Record.Id,
                PasswordId = Folder.Id,
                Password = Record.Key
            });

            var passwords = await _data.GetPasswordsByRecordId(new RecordPasswordsInput()
            {
                RecordId = Record.Record.Id,
                Password = Record.Key
            });

            Record.Passwords = passwords.Passwords;
            Record.IsExpand = true;
            await RefreshState.InvokeAsync();
        }
    }

    void ClearFallback()
    {
        Fallback = string.Empty;
    }

    async Task GenerateLink()
    {
        IsGenerate = true;
        if (Fallback.Length == 0)
        {
            return;
        }

        var result = await _direct.GetDirectToken(new SharedModels.InputModels.LinkInput()
        {
            Fallback = Fallback,
            PasswordId = Folder.Id,
            RecordId = Record.Record.Id,
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            DirectToken = result.Value;
        }
        else
        {
            DirectToken = result.Message;
        }

    }

    void ClearCurrentKey()
    {
        CurrentKey = string.Empty;
    }

    void ClearNewKey()
    {
        NewKey = string.Empty;
    }

    void ClearNote()
    {
        Note = string.Empty;
    }

    async Task ReEncryptPassword()
    {
        IsReEncrypt = true;

        if (CurrentKey.Length == 0 || NewKey.Length == 0)
        {
            return;
        }

        var result = await _data.ReencryptPassword(new PasswordReencryptInput()
        {
            NewKey = NewKey,
            OldKey = CurrentKey,
            RecordId = Record.Record.Id,
            PasswordId = Folder.Id
        });

        if (result)
        {
            var data = await _data.GetPasswordsByPasswordId(new PasswordLocationInput()
            {
                RecordId = Record.Record.Id,
                PasswordId = Folder.Id,
                Password = Record.Key
            });

            if (data != null)
            {
                var passwordObj = Record.Passwords.SingleOrDefault(p => p.Id == Folder.Id);

                if (passwordObj != null) {
                    var passwordIndex = Record.Passwords.IndexOf(passwordObj);
                    Record.Passwords[passwordIndex] = data;
                    Folder = data;

                    await RefreshState.InvokeAsync();
                    StateHasChanged();
                    IsReEncrypt = false;
                    CurrentKey = string.Empty;
                    NewKey = string.Empty;
                }
            }
            else
            {
                ModalWindowState.OpenModal(Modal, "Error", "Failed to update password, refresh.");
            }
        }
        else
        {
            ModalWindowState.OpenModal(Modal, "Error", "Failed to reencrypt password.");
        }
    }

    async Task OnNoteKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            IsNoteSent = true;

            if (Note.Length == 0)
            {
                return;
            }

            var result = await _data.AddNoteToPassword(new NoteInputModel()
            {
                PasswordId = Folder.Id,
                RecordId = Record.Record.Id,
                Text = Note
            });

            if (result)
            {
                var data = await _data.GetPasswordsByPasswordId(new PasswordLocationInput()
                {
                    RecordId = Record.Record.Id,
                    PasswordId = Folder.Id,
                    Password = Record.Key
                });

                if (data != null)
                {
                    Folder.Notes = data.Notes;
                    //await RefreshState.InvokeAsync();
                    StateHasChanged();
                    IsNoteSent = false;
                    Note = string.Empty;
                }
                else
                {
                    ModalWindowState.OpenModal(Modal, "Error", "Failed to add note.");
                }
            }
            else
            {
                ModalWindowState.OpenModal(Modal, "Error", "Failed to add note.");
            }
        }
    }

    async Task DeleteNote(NoteData note)
    {
        var result = await _data.DeletePasswordNote(new NoteDeleteInput()
        {
            NoteId = note.Id,
            RecordId = Record.Record.Id,
            PasswordId = Folder.Id
        });

        if (result)
        {
            var data = await _data.GetPasswordsByPasswordId(new PasswordLocationInput()
            {
                RecordId = Record.Record.Id,
                PasswordId = Folder.Id,
                Password = Record.Key
            });

            if (data != null)
            {
                Folder.Notes = data.Notes;
                StateHasChanged();
            }
            else
            {
                ModalWindowState.OpenModal(Modal, "Error", "Failed to refresh notes.");
            }
        }
        else
        {
            ModalWindowState.OpenModal(Modal, "Error", "Failed to delete note.");
        }
    }
}
