@using PManagerFrontend.Interfaces.Services
@using PManagerFrontend.Models.Components
@inject IDataService _dataService;

<div class="flex flex-col border-1 bg-gray-700">
    <div class="flex flex-row bg-gray-800 py-2 pl-3">        
        <div class="basis-3/10 font-semibold text-gray-100">Create New Record</div>
    </div>
    <div class="flex flex-row py-2 items-end gap-x-3 pl-3">      
        <div class="basis-2/10">
            <div class="text-gray-100">Name</div>
            <input type="text" class="h-10 py-2 w-50 pl-2 text-gray-900 w-full bg-gray-200" @bind-value:event="oninput" @bind-value="Name" />
        </div>
        <div class="basis-2/10">
            <div class="text-gray-100">Url</div>
            <input type="text" class="h-10 py-2 w-50 pl-2 text-gray-900 w-full bg-gray-200" @bind-value:event="oninput" @bind-value="Url" />
        </div>
        <div class="flex flex-col basis-2/10">
            <div class="text-gray-100">Lock Password</div>
            @if (isPassword)
            {
                <input type="text" class="h-10 py-2 w-50 pl-2 text-gray-900 w-full bg-gray-200" @bind-value:event="oninput" @bind-value="LockPassword" />
            }
            else
            {
                <input disabled type="text" class="h-10 py-2 w-50 pl-2 w-full bg-gray-400" />
            }            
        </div>
        <div class="flex flex-col basis-2/10">
            <div class="text-gray-100">Saved Password</div>
            @if (isPassword)
            {
                <input type="text" class="h-10 py-2 w-50 pl-2 text-gray-900 w-full bg-gray-200" @bind-value:event="oninput" @bind-value="NewPassword" />
            }
            else
            {
                <input disabled type="text" class="h-10 py-2 w-50 pl-2 w-full bg-gray-400" />
            }            
        </div>
        <div class="flex flex-col">
            <div class="flex flex-row items-end">
                <label class="flex flex-row items-center gap-x-3 text-sm text-gray-100">
                    <input type="checkbox" name="savepassword" checked @bind-value="isPassword" />
                    Save password
                </label>
            </div>
            <div class="flex flex-row justify-start">
                @if (
                    ((string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(Url) || Category == "0") && isPassword == false) ||
                    ((string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(Url) || string.IsNullOrEmpty(LockPassword) || string.IsNullOrEmpty(NewPassword) || Category == "0") && isPassword == true)
                )
                {
                    <button class="bg-gray-400 text-white px-5 py-2 h-10 hover:bg-gray-400 text-sm font-light">ADD RECORD</button>
                }
                else
                {
                    <button class="bg-sky-400 text-white px-5 py-2 h-10 hover:bg-sky-600 text-sm font-light" @onclick="CreateRecord">ADD RECORD</button>
                }
                <button class="bg-orange-400 text-white px-5 py-2 h-10 hover:bg-orange-600 text-sm font-light" @onclick="ClearAllFields">X</button>
            </div>            
        </div>        
    </div>
</div>


@code {
    [Parameter, EditorRequired]
    public string Category { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ErrorState> OpenError { get; set; }

    [Parameter, EditorRequired]
    public EventCallback RefreshRecords { get; set; }

    bool isPassword { get; set; } = true;
    string Name { get; set; }
    string Url { get; set; }
    string LockPassword { get; set; }
    string NewPassword { get; set; }

    void ClearAllFields()
    {
        Name = "";
        Url = "";
        LockPassword = "";
        NewPassword = "";
    }

    async Task CreateRecord()
    {
        if (string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(Url))
        {
            return;
        }

        if (isPassword)
        {
            // if (string.IsNullOrEmpty(LockPassword) || string.IsNullOrEmpty(NewPassword))
            // {
            //     return;
            // }
            // var record = await _dataService.CreateRecordWithPassword(Name, Url, Category, LockPassword, NewPassword);

            // if (record != null)
            // {
            //     await OpenError.InvokeAsync(new ErrorState()
            //     {
            //         IsOpen = true,
            //         Header = "Success",
            //         Body = "Created Record."
            //     });
            //     await RefreshRecords.InvokeAsync();
            // }
            // else
            // {
            //     await OpenError.InvokeAsync(new ErrorState()
            //     {
            //         IsOpen = true,
            //         Header = "Error",
            //         Body = "Failed to create Record."
            //     });
            // }
        }
        else
        {
            // var record = await _dataService.CreateRecord(Name, Url, Category);

            // if(record != null)
            // {
            //     await OpenError.InvokeAsync(new ErrorState()
            //     {
            //         IsOpen = true,
            //         Header = "Success",
            //         Body = "Created Record."
            //     });
            //     await RefreshRecords.InvokeAsync();
            // }
            // else
            // {
            //     await OpenError.InvokeAsync(new ErrorState()
            //     {
            //         IsOpen = true,
            //         Header = "Error",
            //         Body = "Failed to create Record."
            //     });
            // }
        }
    }
}
