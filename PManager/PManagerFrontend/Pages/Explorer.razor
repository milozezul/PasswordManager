@page "/explorer"
@using PManagerFrontend.Components.Explorer
@using PManagerFrontend.Components.MainWindow
@using PManagerFrontend.Interfaces.Services
@using PManagerFrontend.Models.Components
@using SharedModels.DataService
@using SharedModels.Database

@inject IDataService _data
@inject IStateManager _state
@inject NavigationManager _nav

<div class="flex flex-row">
    <div class="basis-1/4 bg-neutral-700 h-[100vh] flex flex-col overflow-y-scroll overflow-x-hidden">
        <UserAvatar />
        <ToolPanel OpenNewGroupTool="OpenNewGroupTool" />

        @if (IsNewGroup)
        {
            <div class="flex flex-row items-center">
                <NewGroup CloseNewGroupTool="CloseNewGroupTool" RefreshData="LoadData" />
                <img src="icons/close.svg" class="w-4 h-4" @onclick="CloseNewGroupTool" />
            </div>
        }
        @foreach (var group in ExplorerData ?? Enumerable.Empty<GroupFolderModel>())
        {
            <GroupFolder
                Folder="@group"
                OpenGroupHandler="OpenGroupHandler"
                RefreshState="RefreshState" 
                IsSelected="@(CurrentGroup != null && CurrentGroup.Category.Id == group.Category.Id)"/>

            if (group.IsExpand)
            {
                foreach (var record in group.Records ?? Enumerable.Empty<RecordFolderModel>())
                {
                    <RecordFolder
                        Folder="@record"
                        Group="@group"
                        OpenRecordHandler="OpenRecordHandler"
                        RefreshState="RefreshState" 
                        IsSelected="@(CurrentRecord != null && CurrentRecord.Record.Id == record.Record.Id)"/>

                    if (record.IsExpand)
                    {
                        foreach (var password in record.Passwords ?? Enumerable.Empty<DecryptedPassword>())
                        {
                            <PasswordFolder
                                @key="@("pwd" + password.Id)"
                                Folder="password"
                                Record="@record"
                                Group="@group"
                                OpenPasswordHandler="OpenPasswordHandler" 
                                IsSelected="@(CurrentPassword != null && CurrentPassword.Id == password.Id)"/>
                        }
                    }
                }
            }
        }
    </div>
    <div class="basis-3/4 bg-neutral-100 overflow-y-scroll overflow-x-hidden">
        <MainMenu 
            GroupFolder="@(CurrentGroup != null)"
            RecordFolder="@(CurrentRecord != null)"
            PasswordFolder="@(CurrentPassword != null)"
            OnSelectMenu="SelectMainMenuItem"
            MainMenuSelection="@MainMenuSelection"/>

        @if (MainMenuSelection == 0)
        {
            <div></div>
        }
        @if (MainMenuSelection == 1)
        {
            <GroupWindow 
                @key=@("fldr" + CurrentGroup.Category.Id)
                Folder="@CurrentGroup"
                RefreshData="LoadData"/>
        }
        @if (MainMenuSelection == 2)
        {
            <RecordWindow 
                Folder="@CurrentRecord"
                RefreshState="RefreshState"/>
        }
        @if (MainMenuSelection == 3)
        {
            <PasswordWindow 
                @key=@("pwd" + CurrentPassword.Id)
                Folder="@CurrentPassword"
                Record="@CurrentRecord"
                RefreshState="RefreshState"/>
        }
    </div>
</div>

@code {
    List<GroupFolderModel>? ExplorerData { get; set; }
    GroupFolderModel? CurrentGroup { get; set; }
    RecordFolderModel? CurrentRecord { get; set; }
    DecryptedPassword? CurrentPassword { get; set; }

    int MainMenuSelection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(_state.JwtBearer))
        {
            _nav.NavigateTo("/");
        }
        await LoadData();
    }

    async Task LoadData()
    {
        ExplorerData = await _data.GetAllRecords();
    }

    void OpenGroupHandler(GroupFolderModel group)
    {
        CurrentGroup = group;
        CurrentPassword = null;
        CurrentRecord = null;
        SelectMainMenuItem(1);
    }

    void OpenRecordHandler((RecordFolderModel record, GroupFolderModel group) data)
    {
        CurrentRecord = data.record;
        CurrentGroup = data.group;
        CurrentPassword = null;
        SelectMainMenuItem(2);
    }

    void OpenPasswordHandler((DecryptedPassword password, RecordFolderModel record, GroupFolderModel group) data)
    {
        CurrentPassword = data.password;
        CurrentRecord = data.record;
        CurrentGroup = data.group;
        SelectMainMenuItem(3);
    }

    void SelectMainMenuItem(int selection)
    {
        MainMenuSelection = selection;
    }

    void RefreshState()
    {
        StateHasChanged();
    }

    bool IsNewGroup { get; set; }

    void OpenNewGroupTool()
    {
        IsNewGroup = true;
    }

    void CloseNewGroupTool()
    {
        IsNewGroup = false;
    }
}
