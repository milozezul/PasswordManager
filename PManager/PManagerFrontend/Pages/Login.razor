@page "/"
@using PManagerFrontend.Components
@using PManagerFrontend.Interfaces.Services
@using PManagerFrontend.Models.Components
@inject NavigationManager Navigation;
@inject IAuthService _auth;

<div class="flex flex-row justify-center mt-5">
    <ErrorModal Error="@Error" />
    <div class="bg-gray-700 text-white flex flex-col">
        <div class="bg-gray-600 w-full p-2 text-lg">Login</div>
        <div class="w-full flex flex-col items-center p-5">
            <div>
                <div class="text-sm">Username</div>
                <input class="h-10 py-2 w-50 pl-2 text-gray-900 bg-gray-200 w-80" type="text" @bind-value:event="oninput" @bind-value="Username" />
            </div>
            <div class="mt-2">
                <div class="text-sm">Password</div>
                <input class="h-10 py-2 w-50 pl-2 text-gray-900 bg-gray-200 w-80" type="text" @bind-value:event="oninput" @bind-value="Password" />
            </div>
            <div class="mt-5">
                @if (string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password))
                {
                    <button class="bg-gray-400 text-white px-5 py-2 h-10 hover:bg-gray-400 text-sm font-light">LOGIN</button>
                }
                else
                {
                    <button class="bg-sky-400 text-white px-5 py-2 h-10 hover:bg-sky-600 text-sm font-light" @onclick="OnLogin">LOGIN</button>
                }
            </div>
            <div class="mt-3">
                @if (string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password))
                {
                    <button class="bg-gray-400 text-white px-5 py-2 h-10 hover:bg-gray-400 text-sm font-light">REGISTER</button>
                }
                else
                {
                    <button class="bg-sky-400 text-white px-5 py-2 h-10 hover:bg-sky-600 text-sm font-light" @onclick="OnRegister">REGISTER</button>
                }
            </div>
        </div>        
    </div>
</div>

@code {
    ErrorState Error { get; set; } = new ErrorState();

    string Username { get; set; }
    string Password { get; set; }

    async Task OnLogin()
    {
        var res = await _auth.Login(new SharedModels.InputModels.LoginInput()
        {
            Username = Username,
            Password = Password
        });
        if (!string.IsNullOrEmpty(res.Value))
        {            
            Navigation.NavigateTo("/dashboard");
        }
        else
        {
            ErrorState.OpenError(Error, "Error", res.Message);            
        }
    }

    async Task OnRegister()
    {
        var res = await _auth.Register(new SharedModels.InputModels.LoginInput()
        {
            Username = Username,
            Password = Password
        });
        if (res.Value)
        {
            ErrorState.OpenError(Error, "Success", "Registered sucessfully. Please login.");            
        }
        else
        {
            ErrorState.OpenError(Error, "Error", res.Message);            
        }
    }
}
